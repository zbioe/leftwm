(defwidget bar []
  (centerbox :orientation "h"
    (left)
    (center)
    (right)))

(defwidget right []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric :label "﬙"
            :value '${EWW_CPU.avg}'
            :onchange "")
    (metric :label ""
            :value '${EWW_RAM.used_mem_perc}'
            :onchange "")
    (metric :label "≣"
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :onchange "")
    (box :class "label" "| ")
    (light)
    (volume)
    (network)
    (datetime)
    (battery)))

(defwidget center []
  (box :class "center-widgets"
       :space-evenly "false"
       :halign "center"
       :orientation "h"
    (wintitle)
    (music)))

(defwidget wintitle []
  (label :text xtitle :class "wintitle"))

(defpoll xtitle :interval "1s" "scripts/getWinTitle")

(defpoll light :interval "1s" "brightnessctl -m | awk -F, '{print $4}' | tr -d %")
(defwidget light []
  (box :class "metric"
       :orientation "h"
       :space-evenly "false"
       :tooltip "${light}%"
    (box :class "label" "☀")
    (scale :min 0
           :max 101
           :value light
           :onchange "brightnessctl s {}%")))

(defwidget volume []
  (box :class "metric"
       :orientation "h"
       :space-evenly "false"
       :tooltip "${volume.value}% [${volume.status}]"
    (button :onclick "amixer set Master toggle"
            {volume.status == "on" ? "⊲" : "⋪"})
    (scale :min 0
           :max 101
           :value "${volume.value}"
           :onchange "amixer sset Master {}%")))

(defwidget left []
    (box :class "workspaces"
         :orientation "h"
         :space-evenly true
         :halign "start"
         :spacing 10
      (box
        (for tag in '${wmstate.workspaces[0].tags}'
          (button
            :class {tag.mine ? "ws-button-mine" :
                    tag.visible ? "ws-button-visible" :
                    tag.urgent ? "ws-button-urgent" :
                    tag.busy ? "ws-button-busy" : "ws-button"}
            :onclick "leftwm-command \"SendWorkspaceToTag 0 ${tag.index}\""
            {!tag.mine && !tag.busy && !tag.visible && !tag.urgent ?  "·" : "${tag.name}"})))))

(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {music != "" ? "♬${music}" : ""}))

(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :tooltip "${value}%"
           :active {onchange != ""}
           :orientation "h"
           :value value
           :onchange onchange)))

(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s" :initial "50"
  "scripts/getvol")

(defpoll datetime :interval "10s"
  "scripts/getDatetime")

(defwidget datetime []
  (box :tooltip "${datetime.long}" :class "time" {"${datetime.time}"}))

(deflisten wmstate
           :initial '{"workspaces":[{"layout":"","tags":[{"name":"","index":0,"mine":false,"busy":false,"visible":false,"urgent":false}]}]}'
           "leftwm state")

(defpoll battery :interval "3s" "./scripts/battery")

(defwidget battery []
   (label :text "${battery.icon}${battery.charging} "
          :limit-width 10
          :tooltip "${battery.status}: ${battery.percent}%"
          :class "label"
  )
)

(defpoll network :interval "5s" "./scripts/network")

(defwidget network []
    (label :text "${network.icon}"
           :limit-width 10
           :tooltip "${network.name}"
           :class "network"))

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "26px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "33px")
  (bar))
